<!--
 *
 * @author Juerg Gutknecht
 *
 * This file is part of AirPassGen.
 *
 * AirPassGen is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AirPassGen is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AirPassGen. If not, see <http://www.gnu.org/licenses/>.
 *
-->
<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="500" height="600"
					   creationComplete="init()" viewSourceURL="srcview/index.html">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.ArrayUtil;
			import com.andhellfollowed.airpassgen.domain.Password;
			
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.validators.Validator;
			
			protected const MAX_COUNT_VALUE:Number = Number.MAX_VALUE;
			
			[Bindable]
			protected var formValid:Boolean = false;
			
			[Bindable]
			protected var passwords:ArrayCollection = new ArrayCollection();
			
			protected function init():void {
				this.passwordCountInput.addEventListener(KeyboardEvent.KEY_UP,validateForm);
				this.passwordLengthInput.addEventListener(KeyboardEvent.KEY_UP,validateForm);
				this.uppercaseLettersCheckBox.addEventListener(Event.CHANGE,validateForm);
				this.lowercaseLettersCheckBox.addEventListener(Event.CHANGE,validateForm);
				this.numbersCheckBox.addEventListener(Event.CHANGE,validateForm);
				this.symbolsCheckBox.addEventListener(Event.CHANGE,validateForm);
				this.passwordsGrid.addEventListener(ListEvent.ITEM_CLICK,onPasswordSelected);
				this.passwordsGrid.addEventListener(Event.SELECT_ALL,onPasswordSelected);
				this.exportSelectionButton.addEventListener(MouseEvent.CLICK,onExportSelectionButtonClicked);
				this.exportAllButton.addEventListener(MouseEvent.CLICK,onExportAllButtonClicked);
			}
			
			protected function validateForm(event:Event):void {
				this.passwordCountValidator.maxValue = this.calculateMaxCount();
				this.passwordCountValidator.exceedsMaxError = "The max count for this selection is " + this.passwordCountValidator.maxValue;
				
				var invalidValidators:Array = Validator.validateAll([passwordCountValidator,passwordLengthValidator]);
				
				if(invalidValidators.length > 0) {
					formValid = false;
					return;
				}
				
				formValid = this.validateCheckBoxes();
			}
			
			protected function validateCheckBoxes():Boolean {
				var i:uint;
				const length:uint = this.checkBoxFormItem.numElements;
				
				for(i=0;i<length;i++) {
					var cb:CheckBox = this.checkBoxFormItem.getElementAt(i) as CheckBox;
					if(true == cb.selected) {
						return true;
					}
				}
				
				return false;
			}
			
			protected function calculateMaxCount():Number {
				var password:Password = new Password(uint(
					this.passwordLengthInput.text),
					this.uppercaseLettersCheckBox.selected,
					this.lowercaseLettersCheckBox.selected,
					this.numbersCheckBox.selected,
					this.symbolsCheckBox.selected
				);
				
				var count:Number = Math.pow(password.getCharacters().length,int(this.passwordLengthInput.text));
				
				if(count > MAX_COUNT_VALUE
					|| count <= 0
					||Â Number.POSITIVE_INFINITY == count
					|| Number.NEGATIVE_INFINITY == count) {
					count = MAX_COUNT_VALUE;
				}
				
				return count;
			}
			
			protected function onCreateButtonClick(event:MouseEvent):void {
				var passwords:Array = new Array();
				var count:Number = Number(this.passwordCountInput.text);
				var difference:Number = count;
				
				this.enabled = false;
				
				var passwordObj:Password = new Password(uint(
					this.passwordLengthInput.text),
					this.uppercaseLettersCheckBox.selected,
					this.lowercaseLettersCheckBox.selected,
					this.numbersCheckBox.selected,
					this.symbolsCheckBox.selected
				);
				
				do {
					passwords = passwords.concat(this.createPasswords(passwordObj,difference));
					passwords = ArrayUtil.createUniqueCopy(passwords);
					difference = count - passwords.length;
				} while(difference > 0);
				
				this.passwords = new ArrayCollection(passwords);
				
				this.enabled = true;
			}
			
			protected function createPasswords(passwordObj:Password,count:Number):Array {
				var passwords:Array = new Array();
				
				for(var i:Number=0;i<count;i++) {
					passwords.push(passwordObj.createPassword());
				}
				
				return passwords;
			}
			
			protected function checkPasswordExists(value:String):Boolean {
				for(var password:String in this.passwords) {
					if(value == password) {
						return true;
					}
				}
				
				return false;
			}
			
			protected function onPasswordSelected(event:Event):void {
				this.exportSelection();
			}
			
			protected function onExportSelectionButtonClicked(event:MouseEvent):void {
				this.exportSelection();
			}
			
			protected function onExportAllButtonClicked(event:MouseEvent):void {
				this.exportAll();
			}
			
			protected function exportSelection():void {
				var selected:Array = this.passwordsGrid.selectedItems;
				var passwords:String = "";
				var length:int = selected.length;
				if(length > 0) {
					for(var i:int=length-1;i>=0;i--) {
						passwords += selected[i];
						if(i > 0) {
							passwords += "\n";
						}
					}
					
					System.setClipboard(passwords);
				}
			}
			
			protected function exportAll():void {
				var passwords:String = "";
				var length:uint = this.passwords.length;
				for(var i:uint=0;i<length;i++) {
					passwords += this.passwords.getItemAt(i);
					if(i < length-1) {
						passwords += "\n";
					}
				}
				
				System.setClipboard(passwords);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberValidator id="passwordCountValidator"
							source="{passwordCountInput}"
							property="text"
							minValue="1"
							maxValue="{MAX_COUNT_VALUE}"
							domain="int"
							trigger="{passwordCountInput}"
							triggerEvent="keyUp" />
		<mx:NumberValidator id="passwordLengthValidator"
							source="{passwordLengthInput}"
							property="text"
							minValue="1"
							domain="int"
							trigger="{passwordLengthInput}"
							triggerEvent="keyUp" />
	</fx:Declarations>
	
	<s:HGroup left="10" right="10" top="10">
		<mx:Form width="50%">
			<mx:FormItem label="Password Count:">
				<s:TextInput id="passwordCountInput" />
			</mx:FormItem>
			<mx:FormItem label="Password Length:">
				<s:TextInput id="passwordLengthInput"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form width="50%">
			<mx:FormItem id="checkBoxFormItem">
				<s:CheckBox id="uppercaseLettersCheckBox"
							label="Uppercase Letters"
							selected="true" />
				<s:CheckBox id="lowercaseLettersCheckBox"
							label="Lowercase Letters"
							selected="true" />
				<s:CheckBox id="numbersCheckBox"
							label="Numbers"
							selected="true" />
				<s:CheckBox id="symbolsCheckBox"
							label="Symbols"
							selected="true" />
			</mx:FormItem>
		</mx:Form>
	</s:HGroup>
	<s:Button id="createButton" 
			  label="Create Passwords"
			  click="onCreateButtonClick(event)"
			  enabled="{formValid}"
			  left="10"
			  right="10"
			  top="140" />
	<mx:DataGrid id="passwordsGrid"
				 left="10"
				 right="10"
				 top="169"
				 bottom="39"
				 dataProvider="{passwords}"
				 itemClick="onPasswordSelected(event)"
				 selectable="true"
				 allowMultipleSelection="true"
				 sortableColumns="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Passwords" />
		</mx:columns>
	</mx:DataGrid>
	<s:Button id="exportSelectionButton"
			  label="Export Selection"
			  bottom="10"
			  left="10"
			  enabled="{this.passwordsGrid.selectedIndices.length > 0}" />
	<s:Button id="exportAllButton"
			  label="Export All"
			  bottom="10"
			  right="10"
			  enabled="{this.passwords.length > 0}" />
	
</s:WindowedApplication>
